name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0). Leave empty to auto-calculate.'
        required: false
        default: ''

permissions:
  contents: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Install svu
      run: go install github.com/caarlos0/svu@latest
    
    - name: Determine version
      id: version
      run: |
        if [ -n "${{ github.event.inputs.version }}" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION=$(svu next)
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version will be: $VERSION"
    
    - name: Update CHANGELOG.md
      run: |
        # Replace [Unreleased] with the new version
        sed -i "s/## \\[Unreleased\\]/## [${{ steps.version.outputs.version }}] - $(date +%Y-%m-%d)/" CHANGELOG.md
        
        # Add new [Unreleased] section at the top
        sed -i '/^# Changelog/a\\\n\n## [Unreleased]\n' CHANGELOG.md
        
        # Commit the updated changelog
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add CHANGELOG.md
        git commit -m "chore: prepare release ${{ steps.version.outputs.version }}"
        git push origin main
    
    - name: Create and push tag
      run: |
        git tag -a "${{ steps.version.outputs.version }}" -m "Release ${{ steps.version.outputs.version }}"
        git push origin "${{ steps.version.outputs.version }}"
    
    - name: Extract release notes
      id: release_notes
      run: |
        # Extract the release notes for this version
        awk '/^## \\[${{ steps.version.outputs.version }}\\]/{flag=1; next} /^## \\[/{flag=0} flag' CHANGELOG.md > release_notes.md
        echo "Release notes extracted"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        draft: false
        prerelease: false
        body_path: release_notes.md