name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    # Prevent multiple releases from running at the same time
    concurrency:
      group: release
      cancel-in-progress: true
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Install dependencies
      run: |
        # Install svu for version calculation
        go install github.com/caarlos0/svu@latest
        
        # Install git-cliff
        curl -LO https://github.com/orhun/git-cliff/releases/download/v2.0.0/git-cliff-2.0.0-x86_64-unknown-linux-gnu.tar.gz
        tar -xzf git-cliff-*.tar.gz
        sudo mv git-cliff-*/git-cliff /usr/local/bin/
        rm -rf git-cliff-*
    
    - name: Configure Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Calculate next version
      id: version
      run: |
        # Get the current version
        CURRENT_VERSION=$(svu current)
        echo "Current version: $CURRENT_VERSION"
        
        # Calculate next version based on conventional commits
        NEXT_VERSION=$(svu next)
        echo "Next version: $NEXT_VERSION"
        
        # Check if we actually need a new release
        if [ "$CURRENT_VERSION" = "$NEXT_VERSION" ]; then
          echo "No version bump needed"
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      if: steps.version.outputs.should_release == 'true'
      run: |
        # Generate the changelog for the new version
        git-cliff --tag ${{ steps.version.outputs.next_version }} --output CHANGELOG.md --prepend CHANGELOG.md
        
        # Stage the changelog
        git add CHANGELOG.md
    
    - name: Create release commit and tag
      if: steps.version.outputs.should_release == 'true'
      id: commit
      run: |
        # Create a release commit
        git commit -m "chore(release): prepare for ${{ steps.version.outputs.next_version }}"
        
        # Create annotated tag
        git tag -a "${{ steps.version.outputs.next_version }}" -m "Release ${{ steps.version.outputs.next_version }}"
        
        # Push commit and tag
        git push origin main
        git push origin "${{ steps.version.outputs.next_version }}"
        
        # Get the commit SHA for the release
        echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
    
    - name: Extract release notes
      if: steps.version.outputs.should_release == 'true'
      id: release_notes
      run: |
        # Extract just this version's changes from the changelog
        git-cliff --current --strip header --output release-notes.md
    
    - name: Create GitHub Release
      if: steps.version.outputs.should_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.next_version }}
        name: Release ${{ steps.version.outputs.next_version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}