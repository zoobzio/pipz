name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Keep existing trigger
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Version override (leave empty for auto)'
        required: false
        type: string
        default: ''
      dry_run:
        description: 'Dry run mode'
        required: false
        type: boolean
        default: false

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false  # Never cancel releases

permissions:
  contents: write  # Required for creating releases
  packages: write  # Required if publishing to GitHub Packages
  id-token: write  # Required for signing

jobs:
  # Version determination for manual triggers
  determine-version:
    name: Determine Version
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      should_create_tag: ${{ steps.decision.outputs.create }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Install svu
        run: |
          export GOPATH=$HOME/go
          go install github.com/caarlos0/svu@v1.12.0
          echo "$HOME/go/bin" >> $GITHUB_PATH
      
      - name: Determine version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            VERSION="${{ github.event.inputs.version_override }}"
            echo "Using override: $VERSION"
          else
            VERSION=$(svu next)
            echo "Auto-inferred: $VERSION"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      - name: Check tag existence
        id: check
        run: |
          if gh api repos/${{ github.repository }}/git/refs/tags/${{ steps.version.outputs.version }} >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Decision point
        id: decision
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            echo "🔍 DRY RUN - No tag will be created"
            echo "create=false" >> $GITHUB_OUTPUT
          elif [ "${{ steps.check.outputs.exists }}" = "true" ]; then
            echo "❌ Tag already exists"
            echo "create=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ Will create tag"
            echo "create=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create tag via API
        if: steps.decision.outputs.create == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          # Create lightweight tag using GitHub API
          gh api repos/${{ github.repository }}/git/refs \
            --method POST \
            --field ref="refs/tags/$VERSION" \
            --field sha="${{ github.sha }}" \
            || (echo "Failed to create tag" && exit 1)
          
          echo "✅ Created tag: $VERSION"
        env:
          GH_TOKEN: ${{ github.token }}
      
      - name: Summary
        run: |
          echo "## 📋 Release Automation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag Created:** ${{ steps.decision.outputs.create }}" >> $GITHUB_STEP_SUMMARY

  # Validate the module before release
  validate:
    name: Validate Module
    # Conditional: run for tag pushes OR after determine-version succeeds
    if: |
      always() && (
        github.event_name == 'push' || 
        (github.event_name == 'workflow_dispatch' && needs.determine-version.outputs.should_create_tag == 'true')
      )
    needs: ${{ github.event_name == 'workflow_dispatch' && fromJSON('["determine-version"]') || fromJSON('[]') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for changelog generation
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Validate go.mod
        run: |
          go mod tidy
          git diff --exit-code go.mod go.sum || (echo "go.mod/go.sum need updating" && exit 1)
      
      - name: Run tests
        run: |
          go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...
      
      - name: Run linting
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.8
          args: --config=.golangci.yml --timeout=5m
      
      - name: Test examples
        run: |
          for dir in examples/*/; do
            if [ -f "$dir/go.mod" ]; then
              echo "Testing $dir"
              (cd "$dir" && go test -v -race ./...)
            fi
          done

  # Create the release using GoReleaser
  release:
    name: Create Release
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for changelog generation
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          install-only: true
      
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/
          retention-days: 7

  # Verify the release was created successfully
  verify:
    name: Verify Release
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
      
      - name: Get release version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Verify module can be fetched
        run: |
          # Wait a moment for the release to propagate
          sleep 10
          
          # Create a test module
          mkdir -p /tmp/test-pipz
          cd /tmp/test-pipz
          go mod init test
          
          # Try to get the new version
          go get github.com/zoobzio/pipz@${{ steps.version.outputs.VERSION }}
          
          # Verify it was fetched
          go list -m github.com/zoobzio/pipz
      
      - name: Create release summary
        run: |
          echo "### Release ${{ steps.version.outputs.VERSION }} Published Successfully! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Installation" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "go get github.com/zoobzio/pipz@${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Release Notes" >> $GITHUB_STEP_SUMMARY
          echo "View the full release notes at: https://github.com/zoobzio/pipz/releases/tag/${{ steps.version.outputs.VERSION }}" >> $GITHUB_STEP_SUMMARY

  # Optional: Notify about the release
  notify:
    name: Notify Release
    needs: verify
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Get release version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
      
      - name: Create issue for release notes review
        uses: actions/github-script@v7
        with:
          script: |
            const version = '${{ steps.version.outputs.VERSION }}';
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Release ${version} - Post-Release Checklist`,
              body: `## Release ${version} has been published! 🎉
              
              ### Post-Release Checklist
              - [ ] Verify the release appears correctly on GitHub
              - [ ] Test installation with \`go get github.com/zoobzio/pipz@${version}\`
              - [ ] Update any example dependencies if needed
              - [ ] Consider announcing the release if it contains significant changes
              - [ ] Close any issues/PRs that were addressed in this release
              
              ### Release URL
              https://github.com/zoobzio/pipz/releases/tag/${version}
              
              ---
              This issue was automatically created by the release workflow.`,
              labels: ['release', 'documentation']
            });
            console.log(`Created issue #${issue.data.number}`);
        continue-on-error: true  # Don't fail if issue creation fails